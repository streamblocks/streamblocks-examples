// addertree.cal
//
// Copyright (c) 2013 University of Oulu, Finland
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// 5-input complex addition with local oscillator leakage compensation
// for a Digital Predistortion Filter. Based on the C code 
// implementation written by Amanullah Ghazi. Related publication: "Mobile 
// Transmitter Digital Predistortion: Feasibility Analysis, Algorithms
// and Design Exploration" at Asilomar 2013.
//
// Changelog:
// - initial version 16/12/2013

namespace dpd:

actor addertree(float i_in_lo, float q_in_lo) 
// Inputs:
float i_in1,
float q_in1,
float i_in2,
float q_in2,
float i_in3,
float q_in3,
float i_in4,
float q_in4,
float i_in5,
float q_in5
// Outputs:
==> 
float i_out,
float q_out
:
	action i_in1:[ re1 ], q_in1:[ im1 ], i_in2:[ re2 ], q_in2:[ im2 ],
	i_in3:[ re3 ], q_in3:[ im3 ], i_in4:[ re4 ], q_in4:[ im4 ],
	i_in5:[ re5 ], q_in5:[ im5 ]
	==> i_out:[ i ], q_out:[ q ]
	var
		float i,
		float q
	do
		i := re1 + re2 + re3 + re4 + re5 + i_in_lo;
		q := im1 + im2 + im3 + im4 + im5 + q_in_lo;
    end
	
end

end