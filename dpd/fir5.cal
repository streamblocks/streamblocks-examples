// fir5.cal
//
// Copyright (c) 2013 University of Oulu, Finland
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// 5-tap complex FIR filter for Digital Predistortion. 
// Based on the C code implementation written by Amanullah Ghazi. 
// Related publication: "Mobile Transmitter Digital Predistortion: 
// Feasibility Analysis, Algorithms and Design Exploration" at 
// Asilomar 2013.
//
// Changelog:
// - initial version 16/12/2013

namespace dpd:

actor fir5(
	float mul_1_re_c, float mul_1_im_c, 
	float mul_2_re_c, float mul_2_im_c, 
	float mul_3_re_c, float mul_3_im_c, 
	float mul_4_re_c, float mul_4_im_c, 
	float mul_5_re_c, float mul_5_im_c
) 
// Inputs:
float i_in,
float q_in
// Outputs:
==> 
float i_out,
float q_out
:

	// complex multiply, real part
	function cplx_mul_re( float re1, float im1, float re2, float im2 ) --> float :
		re1 * re2 - im1 * im2
	end

	// complex multiply, imaginary part
	function cplx_mul_im( float re1, float im1, float re2, float im2 ) --> float :
		re1 * im2 + im1 * re2
	end

	float delay_1_i_buffer;
	float delay_1_q_buffer;
	float delay_2_i_buffer;
	float delay_2_q_buffer;
	float delay_3_i_buffer;
	float delay_3_q_buffer;
	float delay_4_i_buffer;
	float delay_4_q_buffer;
	
	initialize ==>
	do
		delay_1_i_buffer := 0;
		delay_1_q_buffer := 0;
		delay_2_i_buffer := 0;
		delay_2_q_buffer := 0;
		delay_3_i_buffer := 0;
		delay_3_q_buffer := 0;
		delay_4_i_buffer := 0;
		delay_4_q_buffer := 0;
	end

	action i_in:[ re1 ], q_in:[ im1 ]
	==> i_out:[ io ], q_out:[ qo ]
	var
		float io,
		float qo,
		float delay_1_i_out,
		float delay_1_q_out,
		float delay_2_i_out,
		float delay_2_q_out,
		float delay_3_i_out,
		float delay_3_q_out,
		float delay_4_i_out,
		float delay_4_q_out,
		float mul_1_i_out,
		float mul_1_q_out,
		float mul_2_i_out,
		float mul_2_q_out,
		float mul_3_i_out,
		float mul_3_q_out,
		float mul_4_i_out,
		float mul_4_q_out,
		float mul_5_i_out,
		float mul_5_q_out,
		float add_1_i_out,
		float add_1_q_out,
		float add_2_i_out,
		float add_2_q_out,
		float add_3_i_out,
		float add_3_q_out		
	do
		delay_1_i_out := delay_1_i_buffer;
		delay_1_q_out := delay_1_q_buffer;
		delay_1_i_buffer := re1;
		delay_1_q_buffer := im1;
		
		mul_1_i_out := cplx_mul_re(re1, im1, mul_1_re_c, mul_1_im_c);
		mul_1_q_out := cplx_mul_im(re1, im1, mul_1_re_c, mul_1_im_c);
		
		delay_2_i_out := delay_2_i_buffer;
		delay_2_q_out := delay_2_q_buffer;
		delay_2_i_buffer := delay_1_i_out;
		delay_2_q_buffer := delay_1_q_out;
		
		mul_2_i_out := cplx_mul_re(delay_1_i_out, delay_1_q_out, mul_2_re_c, mul_2_im_c);
		mul_2_q_out := cplx_mul_im(delay_1_i_out, delay_1_q_out, mul_2_re_c, mul_2_im_c);

		delay_3_i_out := delay_3_i_buffer;
		delay_3_q_out := delay_3_q_buffer;
		delay_3_i_buffer := delay_2_i_out;
		delay_3_q_buffer := delay_2_q_out;
		
		mul_3_i_out := cplx_mul_re(delay_2_i_out, delay_2_q_out, mul_3_re_c, mul_3_im_c);
		mul_3_q_out := cplx_mul_im(delay_2_i_out, delay_2_q_out, mul_3_re_c, mul_3_im_c);

		delay_4_i_out := delay_4_i_buffer;
		delay_4_q_out := delay_4_q_buffer;
		delay_4_i_buffer := delay_3_i_out;
		delay_4_q_buffer := delay_3_q_out;
		
		mul_4_i_out := cplx_mul_re(delay_3_i_out, delay_3_q_out, mul_4_re_c, mul_4_im_c);
		mul_4_q_out := cplx_mul_im(delay_3_i_out, delay_3_q_out, mul_4_re_c, mul_4_im_c);

		mul_5_i_out := cplx_mul_re(delay_4_i_out, delay_4_q_out, mul_5_re_c, mul_5_im_c);
		mul_5_q_out := cplx_mul_im(delay_4_i_out, delay_4_q_out, mul_5_re_c, mul_5_im_c);

		add_1_i_out := mul_1_i_out + mul_2_i_out;
		add_1_q_out := mul_1_q_out + mul_2_q_out;

		add_3_i_out := mul_3_i_out + mul_4_i_out;
		add_3_q_out := mul_3_q_out + mul_4_q_out;

		add_2_i_out := add_3_i_out + add_1_i_out;
		add_2_q_out := add_3_q_out + add_1_q_out;

		io := add_2_i_out + mul_5_i_out;
		qo := add_2_q_out + mul_5_q_out;
	end
	
end

end
