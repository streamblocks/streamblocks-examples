// polynomial.cal
//
// Copyright (c) 2013 University of Oulu, Finland
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// Polynomial computation for a Digital Predistortion Filter.
// Based on the C code implementation written by Amanullah Ghazi. 
// Related publication: "Mobile Transmitter Digital Predistortion: 
// Feasibility Analysis, Algorithms and Design Exploration" at 
// Asilomar 2013.
//
// Changelog:
// - initial version 16/12/2013

namespace dpd:

actor polynomial() 
// Inputs:
float i_in,
float q_in
// Outputs:
==> 
float i_out1,
float q_out1,
float i_out2,
float q_out2,
float i_out3,
float q_out3,
float i_out4,
float q_out4,
float i_out5,
float q_out5
:
	// complex absolute square root
	function cplx_abs_sqr( float re, float im ) --> float :
		re * re + im * im
	end
	
	action i_in:[ i ], q_in:[ q ]
	==> i_out1:[ io1 ], q_out1:[ qo1 ],i_out2:[ io2 ], q_out2:[ qo2 ], i_out3:[ io3 ], 
	q_out3:[ qo3 ], i_out4:[ io4 ], q_out4:[ qo4 ], i_out5:[ io5 ], q_out5:[ qo5 ]
	var
		float io1,
		float qo1,
		float io2,
		float qo2,
		float io3,
		float qo3,
		float io4,
		float qo4,
		float io5,
		float qo5,
		float abs_sqr_o,
		float neg_1_o,
		float mul_1_o,
		float sq_o,
		float mul_2_o,
		float mul_3_o,
		float mul_4_o,
		float neg_2_o
	do
		io1 := i;
		qo1 := q;
		io4 := i;
		abs_sqr_o := cplx_abs_sqr(i, q);
		neg_1_o := -q;
		mul_1_o := i * abs_sqr_o;
		sq_o := abs_sqr_o * abs_sqr_o;
		mul_2_o := q * abs_sqr_o;
		qo4 := neg_1_o;
		io2 := mul_1_o;
		mul_3_o := sq_o * i;
		io5 := mul_1_o;
		mul_4_o := sq_o * q;
		neg_2_o := -mul_2_o;
		qo2 := mul_2_o;
		io3 := mul_3_o;
		qo3 := mul_4_o;
		qo5 := neg_2_o;
    end
	
end

end