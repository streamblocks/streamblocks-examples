namespace sw.systolic:

    actor LeftBuffer()  
            uint(size=8) SIZE_READ,
            uint(size=8) SIZE_REF_CUTS, 
            int(size=16) V
            ==> 
            int(size=16) O:
        
        uint(size=8) macroblocks;
        uint(size=8) sizeRead;
        
        uint(size=8) i; 
        uint(size=8) m;
                            
        getSize: action SIZE_REF_CUTS:[sm], SIZE_READ:[sb] ==>
        do
            sizeRead := sb;
            macroblocks := sm;
            
            i := 0;
            m := 0;
        end
        
        sendZeros: action  ==> O:[0]
        guard
            i < sizeRead and m = 0
        do
            i := i + 1;
            if i = sizeRead then
                m := 1;
            end
        end
        
        endSendZeros: action ==>
        guard
            i = sizeRead and m = 1
        do
            i := 0;
        end
        
        copyTokens: action V:[v] ==> O:[v]
        do
            i := i + 1;
            if i = sizeRead then
                i := 0;
                m := m + 1;
            end
        end
        
        endCopyTokens: action ==>
        guard m = macroblocks
        end
        
        consumeTokens: action V:[v] ==>
        do
            i := i + 1;
            if i = sizeRead then
                i := 0;
                m := m + 1;
            end
        end
        
        reset : action ==>
        guard
            m > macroblocks
        end
        
        schedule fsm s0:
            s0  (getSize)       --> s1;
            s1  (sendZeros)     --> s1;
            s1  (endSendZeros)  --> s2;
            s2  (copyTokens)    --> s2;
            s2  (endCopyTokens) --> s3;
            s3  (consumeTokens) --> s3;
            s3  (reset)         --> s0;
        end
        
        priority
            endCopyTokens > copyTokens;
            reset > consumeTokens;
        end
        
    end
end