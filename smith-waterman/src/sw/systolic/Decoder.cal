namespace sw.systolic:

    import all sw.configuration;

    actor Decoder() 	
            uint(size=3) REF, 
            uint(size=3) READ, 
            int(size=16) ENC_AL_REF, 
            int(size=16) ENC_AL_READ 
            ==>
            uint(size=3) AL_REF, 
            uint(size=3) AL_READ :
        
        bool hasA := false;
        bool hasB := false;
        bool hasE := false; 
                            
        List(type:uint(size=3), size=MAX_STRING_SIZE) stringA;

        List(type:uint(size=3), size=MAX_STRING_SIZE) stringB;
        
        uint(size=8) sizeA := 0;
        uint(size=8) sizeB := 0;
        
        getAB: action REF:[a], READ:[b] ==>
            guard (not hasA) and (not hasB)
        do

            if a = EOS then
                hasA := true;
            else
                stringA[sizeA] := a;
                sizeA := sizeA + 1;	
            end
            
            if b = EOS then
                hasB := true;
            else
                stringB[sizeB] := b;
                sizeB := sizeB + 1;	
            end
        end

        getA: action REF:[a] ==>
            guard not hasA
        do
            if a = EOS then
                hasA := true;
            else
                stringA[sizeA] := a;
                sizeA := sizeA + 1;	
            end
        end
        
        getB: action READ:[b] ==>
            guard not hasB
        do
            if b = EOS then
                hasB := true;
            else
                stringB[sizeB] := b;
                sizeB := sizeB + 1;	
            end
        end
        
        trimStrings: action ==>
        guard
            hasA and hasB 
        do		
            hasE := false; 
        end
        
        decode: action ENC_AL_REF:[idxA], ENC_AL_READ:[idxB] ==>AL_REF:[a], AL_READ:[b]
        guard
            not hasE
        var
            uint(size=3)a := N, uint(size=3) b := N
        do
            if(idxA = EOE or idxB = EOE) then
                a := EOS;
                b := EOS;
                hasE := true;
            else 
                if(idxA >=0 and idxA < sizeA) then
                    a := stringA[idxA];
                end 
                
                if(idxB >=0 and idxB < sizeB) then
                    b := stringB[idxB];
                end
                //a := if idxA != INDEL then stringA[idxA] else N end;
                //b := if idxB != INDEL then stringB[idxB] else N end;
            end
        end
        
        reset: action ==>
        guard
            hasE
        do
            sizeA := 0;
            sizeB := 0;
            hasA := false;
            hasB := false;
        end
        
        schedule fsm s0 :
            s0  (getAB)         --> s0;
            s0  (getA)          --> s0;
            s0  (getB)          --> s0;
            s0  (trimStrings)   --> s1;
            s1  (decode)        --> s1;
            s1  (reset)         --> s0; 
        end
        
        priority
            getAB > getA;
            getAB > getB;
        end

    end

end