namespace jpeg:

    import all std.video.display;

    actor Display()
        uint(size=8) Byte,
        int(size=16) SIZE
            ==>
            :
        
        uint(size=8)[MAX_WIDTH * MAX_HEIGHT]  pictureBufferY;
        uint(size=8)[MAX_WIDTH * MAX_HEIGHT / 4]  pictureBufferU;
        uint(size=8)[MAX_WIDTH * MAX_HEIGHT / 4]  pictureBufferV;
        int (size=32) pictureSizeInMb;
        int (size=32) nbBlockGot;
        uint(size=2)  chromaComponent;
        int (size=16) pictureWidthLuma;
        int (size=16) pictureHeightLuma;
        uint(size=12) xIdxLuma;
        uint(size=32) yOffLuma;
        uint(size=12) xIdxChroma;
        uint(size=32) yOffChroma;


        initialize ==>
        do
            if ((displayYUV_getFlags() & DISP_ENABLE) != 0) then
                displayYUV_init();
            end
        
            fpsPrintInit();
        end

        getPictureSize: action SIZE:[WidthValue, HeightValue] ==>
        do
            pictureWidthLuma  := WidthValue  * 16;
            pictureHeightLuma := HeightValue * 16;
            pictureSizeInMb   := WidthValue * HeightValue;
            nbBlockGot := 0;
            xIdxLuma   := 0;
            xIdxChroma := 0;
            yOffLuma   := 0;
            yOffChroma := 0;
        end

        getPixValue.launch.Luma: action Byte :[Bytes] repeat 256 ==>
        guard
            nbBlockGot < pictureSizeInMb
        var
            uint(size=8)[256]  buf,
            uint(size=32) yOff := yOffLuma,
            uint(size=9)  idx  := 0
        do
            nbBlockGot := nbBlockGot + 1;
            foreach int j in 0 .. 7 do
                foreach int i in 0 .. 7 do
                    buf[i + j * 16] := Bytes[i + j * 8];
                    buf[i + 8 + j * 16] := Bytes[i + 64 + j * 8];
                    buf[i + (j + 8) * 16] := Bytes[i + 2 * 64 + j * 8];
                    buf[i + 8 + (j + 8) * 16] := Bytes[i + 3 * 64 + j * 8];
                end
            end
                
            foreach int y in 0 .. 15
            do
                foreach int x in xIdxLuma .. xIdxLuma + 15
                do
                    pictureBufferY[yOff +x] := buf[idx];
                    idx := idx + 1;
                end
                yOff := yOff + pictureWidthLuma;
            end
            xIdxLuma := xIdxLuma + MB_SIZE_LUMA;
            chromaComponent := 0;
        end


        getPixValue.launch.Chroma: action Byte :[Bytes] repeat 64 ==>
        var
            uint(size=32) yOff := yOffChroma,
            uint(size=7)  idx  := 0
        do
            foreach int y in 0 .. 7
            do
                foreach int x in xIdxChroma .. xIdxChroma + 7
                do
                    if(chromaComponent=0)then
                        pictureBufferU[yOff + x] := Bytes[idx];
                    else
                        pictureBufferV[yOff + x] := Bytes[idx];
                    end
                    idx := idx + 1;
                end
                yOff := yOff + pictureWidthLuma/2;
            end
            if(chromaComponent != 0)then
                xIdxChroma := xIdxChroma + MB_SIZE_CHROMA;
                if(xIdxLuma = pictureWidthLuma)then
                    xIdxLuma   := 0;
                    xIdxChroma := 0;
                    yOffLuma   := yOffLuma   + MB_SIZE_LUMA   * pictureWidthLuma;
                    yOffChroma := yOffChroma + MB_SIZE_CHROMA * pictureWidthLuma/2;
                end
            end
            chromaComponent := 1;
        end

        displayPicture: action ==>
        guard
            nbBlockGot >= pictureSizeInMb,
            (displayYUV_getFlags() & DISP_ENABLE) != 0
        do
            fpsPrintNewPicDecoded();
            displayYUV_displayPicture(pictureBufferY, pictureBufferU, pictureBufferV, pictureWidthLuma, pictureHeightLuma);
        end
        
        displayDisable: action ==>
        guard
            nbBlockGot >= pictureSizeInMb
        do
            fpsPrintNewPicDecoded();
        end

        

        schedule fsm GetPictureSize:
            GetPictureSize  (getPictureSize            )--> GetLumaBlock;
            GetLumaBlock    (getPixValue.launch.Luma   )--> GetChroma1Block;
            GetChroma1Block (getPixValue.launch.Chroma )--> GetChroma2Block;
            GetChroma2Block (getPixValue.launch.Chroma )--> GetLumaBlock;
            
            GetLumaBlock    (displayPicture            )--> GetPictureSize;
            GetLumaBlock    (displayDisable            )--> GetPictureSize;
        end

        priority
            getPixValue > displayPicture;
            displayPicture > displayDisable;
        end
    end


end