namespace jpeg.decoder.parallel.idct:

import var System.bitops.rshift;

	@pipeline(flushing=true)
	actor Scaled_1d_idct () int(size=32) IN ==> int(size=32) OUT :
	
		function pmul_1_1(int X) --> int
		var
			int Temp1 = rshift(X, 3) - rshift(X, 7) :
			X - Temp1
		end
	
		function pmul_1_2(int X) --> int
		var
			int Temp1 = rshift(X, 3) - rshift(X, 7),
			int Temp2 = Temp1 - rshift(X, 11) :
			Temp1 + rshift(Temp2, 1)
		end
	
		function pmul_2_1(int X) --> int
		var
			int Temp1 = rshift(X, 9) - X :
			rshift(Temp1, 2) - Temp1
		end
	
		function pmul_2_2(int X) --> int :
			rshift(X, 1)
		end
	
		function pmul_3_1(int X) --> int
		var
			int Temp1 = X + rshift(X, 5),
			int Temp2 = rshift(Temp1, 2) :
			Temp2 + rshift(X, 4)
		end
	
		function pmul_3_2(int X) --> int
		var
			int Temp1 = X + rshift(X, 5),
			int Temp2 = rshift(Temp1, 2) :
			Temp1 - Temp2
		end
	
		action IN:[ x ] repeat 8 ==> OUT:[ y ] repeat 8
		var
			int tmp_1 , int tmp_2 , int tmp_3 ,
			int tmp_4 , int xa , int xb , List(type: int, size=8) y
		do
			xa := x[1] + x[7];
			xb := x[1] - x[7];
			x[1] := xa + x[3];
			x[3] := xa - x[3];
			x[7] := xb + x[5];
			x[5] := xb - x[5];
			tmp_1 := pmul_1_1(x[3]);
			tmp_4 := pmul_1_2(x[3]);
			tmp_3 := pmul_1_1(x[5]);
			tmp_2 := pmul_1_2(x[5]);
			x[3] := tmp_1 - tmp_2;
			x[5] := tmp_3 + tmp_4;
			tmp_1 := pmul_2_1(x[1]);
			tmp_4 := pmul_2_2(x[1]);
			tmp_3 := pmul_2_1(x[7]);
			tmp_2 := pmul_2_2(x[7]);
			x[1] := tmp_1 + tmp_2;
			x[7] := tmp_3 - tmp_4;
			tmp_1 := pmul_3_1(x[2]);
			tmp_4 := pmul_3_2(x[2]);
			tmp_3 := pmul_3_1(x[6]);
			tmp_2 := pmul_3_2(x[6]);
			x[2] := tmp_1 - tmp_2;
			x[6] := tmp_3 + tmp_4;
			xa := x[0] + x[4];
			xb := x[0] - x[4];
			x[0] := xa + x[6];
			x[6] := xa - x[6];
			x[4] := xb + x[2];
			x[2] := xb - x[2];
			y := [ x[0] + x[1], x[4] + x[5], x[2] + x[3], x[6] + x[7], x[6] - x[7], x[2]
			- x[3], x[4] - x[5], x[0] - x[1] ];
		end
	
	end

end


      
     
