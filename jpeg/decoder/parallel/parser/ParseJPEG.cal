namespace jpeg.decoder.parallel.parser:

import var System.bitops.lshift;

	actor ParseJPEG() uint(size=8) Byte
		==> uint(size=8) Data, uint(size=8) QT, uint(size=8) HT, uint(size=16) SOI:
	
	// current offset in file
	int offset;
	int to_read := -1;
	uint sent := 0;
	uint(size=8) cur_marker := 0;
	
	// Commented debug printing.
	
	//List(type:String, size=16) dec_to_hex :=
	//	["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"];
	//
	//// Procedure print_hexa uses a buffer to store the conversion result
	//procedure print_hexa(int x)
	//var
	//	int idx := 7,
	//	List(type:String, size=8) conv_buff :=
	//		["0", "0", "0", "0", "0", "0", "0", "0"]
	//begin
	//	// Store result in buffer
	//	while (x != 0) do
	//		conv_buff[idx] := dec_to_hex[x mod 16];
	//		idx := idx - 1;
	//		x := x / 16;
	//	end
	//	print("0x");
	//	foreach int i in 0 .. 7 do
	//		print(conv_buff[i]);
	//	end
	//	println("");
	//end
	//
	//procedure print_marker(String Name, String Marker, int offset)
	//begin
	//	println("*** Marker: " + Name + " (" + Marker + ") ***");
	//	print("OFFSET: ");
	//	print_hexa(offset);
	//	println("");
	//end
	
	
	// Actions
	
	SOI:action Byte:[b] repeat 2 ==>
	do
		offset := 2;
		to_read := -1;
	 	sent := 0;
		cur_marker := 0;
		if (b[0] = 0xFF and b[1] = 0xD8) then
			//print_marker("SOI", "xFFD8", 0);
		end
	end
	
	// Format is 0xFF marker_code length_high length_low : 4 bytes
	receive_marker:action Byte:[b] repeat 4 ==>
	//guard (b[0] = 0xFF)
	do
	    to_read := b[3] + (b[2] << 8) - 2;
	    cur_marker := b[1];
		offset := offset + 4;
	end
	
	skip:action Byte:[b] ==>
	guard (to_read != 0)
	do
		to_read := to_read - 1;
		offset := offset + 1;
	end
	
	done:action ==>
	guard (to_read = 0)
	do
		to_read := -1;
	end
	
	APPn:action ==>
	guard (cur_marker >= 0xe0 and cur_marker <= 0xef)
	do
		//print_marker("APPn", "xFFEn", offset - 4);
	end
	
	COMM:action ==>
	guard (cur_marker = 0xFE)
	do
		//print_marker("COMM", "xFFFE", offset - 4);
	end
	
	DQT:action ==>
	guard (cur_marker = 0xDB)
	do
		//print_marker("DQT", "xFFDB", offset - 4);
		offset := offset + to_read;
	end
	
	send_DQT:action Byte:[b] ==> QT:[b]
	guard (to_read != 0)
	do
		to_read := to_read - 1;
	end
	
	SOF0:action Byte:[b] repeat 15 ==> SOI:[w >> 4, h >> 4]
	guard (cur_marker = 0xC0)
	var
		int w,
		int h
	do
	//	print_marker("SOF0 (Baseline DCT)", "xFFC0", offset - 4);
		h := lshift(b[1], 8) + b[2];
		w := lshift(b[3], 8) + b[4];
	end
	
	DHT:action ==>
	guard (cur_marker = 0xC4)
	do
		//print_marker("DHT (Define Huffman Table)", "xFFC4", offset - 4);
	end
	
	send_DHT:action Byte:[b] ==> HT:[b]
	guard (to_read != 0)
	do
		to_read := to_read - 1;
		offset := offset + 1;
	end
	
	SOS:action ==>
	guard (cur_marker = 0xDA)
	do
		//print_marker("SOS (Start of Scan)", "xFFDA", offset - 4);
	end
	
	scan_data:action Byte:[b] ==> Data:[b]
	guard (b != 0xFF)
	do
		offset := offset + 1;
		sent := sent + 1;
	end
	
	receive_FF:action Byte:[b] ==>
	guard (b = 0xFF)
	do
		offset := offset + 1;
	end
	
	// In the entropy-coded data, 0x00 is inserted after 0xFF as a stuffing byte.
	// Therefore if 0x00 is encountered after 0xFF, output 0xFF
	stuffing:action Byte:[b] ==> Data:[0xFF]
	guard (b = 0x00)
	do
		sent := sent + 1;
		offset := offset + 1;
	end
	
	EOI:action Byte:[b] ==>
	guard (b = 0xD9)
	do
	//	print_marker("EOI (End of Image)", "xFFD9", offset - 1);
		offset := offset + 1;
	end
	
	padding16:action ==> Data:[0, 0]
	end
	
	
	// Schedule FSM
	schedule fsm wait_SOI:
		wait_SOI(SOI)-->wait_marker;
		
		wait_marker(receive_marker)-->handle_marker;
		
		skip_bytes(skip)-->skip_bytes;
		skip_bytes(done)-->wait_marker;
		
		handle_marker(APPn)-->skip_bytes;
		handle_marker(COMM)-->skip_bytes;
		
		handle_marker(DQT)-->wait_DQT;
		wait_DQT(send_DQT)-->wait_DQT;
		wait_DQT(done)-->wait_marker;
		
		handle_marker(SOF0)-->wait_marker;
		
		handle_marker(DHT)-->wait_DHT;
		wait_DHT(send_DHT)-->wait_DHT;
		wait_DHT(done)-->wait_marker;
		
		handle_marker(SOS)-->wait_scan_header;
		
		wait_scan_header(skip)-->wait_scan_header;
		wait_scan_header(done)-->wait_scan_data;
		wait_scan_data(scan_data)-->wait_scan_data;
		wait_scan_data(receive_FF)-->is_stuffing;
		is_stuffing(stuffing)-->wait_scan_data;
		is_stuffing(EOI)-->padding;
		padding(padding16)-->wait_SOI;
	end
	
	end

end