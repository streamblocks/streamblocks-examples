namespace jpeg.decoder.parallel.dequant:

	@pipeline(flushing=true)
	actor Dequant(int mb) uint(size=16) SOI,  uint(size=8) QT,  int(size=24) Block==> int(size=13) Out:
	
		// Reverse zigzag, the ith value give the index of the corresponding
		// coefficient in the quantization table for the ith zigzag value.
		List(type:uint(size=6), size=64) zigzag := 
			[ 0,  1,  5,  6, 14, 15, 27, 28,
		      2,  4,  7, 13, 16, 26, 29, 42,
		      3,  8, 12, 17, 25, 30, 41, 43,
		      9, 11, 18, 24, 31, 40, 44, 53,
		     10, 19, 23, 32, 39, 45, 52, 54,
		     20, 22, 33, 38, 46, 51, 55, 60,
		     21, 34, 37, 47, 50, 56, 59, 61,
		     35, 36, 48, 49, 57, 58, 62, 63];
		
		List(type:uint(size=8), size=64) quant;
		
		int macroblocks;
		int mbcount;
		
		get_SOI: action SOI:[w, h] ==>
		do
			macroblocks := mb * w * h;
			mbcount := 0;
		end 
		
		
		receive_QT:action QT:[q] repeat 64 ==>
		do
			quant := [q[i] : for int i in 0 .. 63];
		end
		
		receive_block:action Block:[b] repeat 64 ==> Out:[[ b[zigzag[i]] : for int i in 0 .. 63 ]] repeat 64
		do
			b := [b[i] * quant[i] : for int i in 0 .. 63];
			mbcount := mbcount + 1;	
		end
		
		eoi: action ==>
		guard
			mbcount = macroblocks
		end
		
		schedule fsm s0:
			s0	(get_SOI) 		--> s1;
			s1	(receive_QT) 	--> s2;
			
			s2	(receive_block) --> s2;
			s2	(eoi)			--> s0;
		end
		
		priority
			eoi > receive_block;
		end
	
	end

end