namespace hetero.stencil.kernels.GuassianBlur:



  import entity hetero.stencil.kernels.utils.KernelStreamer;

  import entity hetero.stencil.kernels.utils.DynamicFilter;
  import entity hetero.stencil.kernels.utils.Splitter;

  @pipeline(flushing=true)
  actor GuassianBlurCompute(type DTYPE)

    DTYPE Ref0, // pixel(x = 1, y = 1)
    DTYPE Ref1, // pixel(x = 0, y = 1)
    DTYPE Ref2, // pixel(x = -1, y = 1)
    DTYPE Ref3, // pixel(x = 1, y = 0)
    DTYPE Ref4, // pixel(x = 0, y = 0)
    DTYPE Ref5, // pixel(x = -1, y = 0)
    DTYPE Ref6, // pixel(x = 1, y = -1)
    DTYPE Ref7, // pixel(x = 0, y = -1)
    DTYPE Ref8  // pixel(x = -1, y = 0)
    ==>
    DTYPE Out:

    compute: action 
      Ref0 : [t0] , // pixel(x = 1, y = 1)
      Ref1 : [t1] , // pixel(x = 0, y = 1)
      Ref2 : [t2] , // pixel(x = -1, y = 1)
      Ref3 : [t3] , // pixel(x = 1, y = 0)
      Ref4 : [t4] , // pixel(x = 0, y = 0)
      Ref5 : [t5] , // pixel(x = -1, y = 0)
      Ref6 : [t6] , // pixel(x = 1, y = -1)
      Ref7 : [t7] , // pixel(x = 0, y = -1)
      Ref8 : [t8]   // pixel(x = -1, y = 0)
      ==>
      Out:[
        (
          (t0 + t1 * 2 + t2) +
          (t3 + t4 * 2 + t5) * 2 +
          (t6 + t7 * 2 + t8)
        ) / 16
      ]
    end
  end
  
  network GuassianBlurKernel()
    uint(size = 8) In,
    uint(size = 32) Width, uint(size = 32) Height ==> uint(size = 8) Out:

    var 
      int X_UB = -2;
      int Y_UB = -2;
      int X_LB = 1;
      int Y_LB = 1;
    entities
      
      f0 = DynamicFilter(
        DTYPE: uint(size=8),
        x_lb_offset = X_LB, 
        x_ub_offset = X_UB,
        y_lb_offset = Y_LB,
        y_ub_offset = Y_UB,
        x_offset = 1,
        y_offset = 1);
      f1 = DynamicFilter(
        DTYPE: uint(size=8),
        x_lb_offset = X_LB, 
        x_ub_offset = X_UB,
        y_lb_offset = Y_LB,
        y_ub_offset = Y_UB,
        x_offset = 0,
        y_offset = 1);
      f2 = DynamicFilter(
        DTYPE: uint(size=8),
        x_lb_offset = X_LB, 
        x_ub_offset = X_UB,
        y_lb_offset = Y_LB,
        y_ub_offset = Y_UB,
        x_offset = -1,
        y_offset = 1);
      f3 = DynamicFilter(
        DTYPE: uint(size=8),
        x_lb_offset = X_LB, 
        x_ub_offset = X_UB,
        y_lb_offset = Y_LB,
        y_ub_offset = Y_UB,
        x_offset = 1,
        y_offset = 0);
      f4 = DynamicFilter(
        DTYPE: uint(size=8),
        x_lb_offset = X_LB, 
        x_ub_offset = X_UB,
        y_lb_offset = Y_LB,
        y_ub_offset = Y_UB,
        x_offset = 0,
        y_offset = 0);
      f5 = DynamicFilter(
        DTYPE: uint(size=8),
        x_lb_offset = X_LB, 
        x_ub_offset = X_UB,
        y_lb_offset = Y_LB,
        y_ub_offset = Y_UB,
        x_offset = -1,
        y_offset = 0);
      f6 = DynamicFilter(
        DTYPE: uint(size=8),
        x_lb_offset = X_LB, 
        x_ub_offset = X_UB,
        y_lb_offset = Y_LB,
        y_ub_offset = Y_UB,
        x_offset = 1,
        y_offset = -1);
      f7 = DynamicFilter(
        DTYPE: uint(size=8),
        x_lb_offset = X_LB, 
        x_ub_offset = X_UB,
        y_lb_offset = Y_LB,
        y_ub_offset = Y_UB,
        x_offset = 0,
        y_offset = -1);
      f8 = DynamicFilter(
        DTYPE: uint(size=8),
        x_lb_offset = X_LB, 
        x_ub_offset = X_UB,
        y_lb_offset = Y_LB,
        y_ub_offset = Y_UB,
        x_offset = -1,
        y_offset = -1);


      s0 = Splitter(DTYPE: uint(size=8));
      s1 = Splitter(DTYPE: uint(size=8));
      s2 = Splitter(DTYPE: uint(size=8));
      s3 = Splitter(DTYPE: uint(size=8));
      s4 = Splitter(DTYPE: uint(size=8));
      s5 = Splitter(DTYPE: uint(size=8));
      s6 = Splitter(DTYPE: uint(size=8));
      s7 = Splitter(DTYPE: uint(size=8));

     

      compute = GuassianBlurCompute(DTYPE : uint(size = 8));

    structure

      In --> s0.In;

      s0.Left --> f0.In { bufferSize = 4; };
      s0.Right --> s1.In;

      s1.Left --> f1.In { bufferSize = 4; };
      s1.Right --> s2.In;

      s2.Left --> f2.In { bufferSize = 4; };
      s2.Right --> s3.In;

      s3.Left --> f3.In { bufferSize = 4; };
      s3.Right --> s4.In;

      s4.Left --> f4.In { bufferSize = 4; };
      s4.Right --> s5.In;

      s5.Left --> f5.In { bufferSize = 4; };
      s5.Right --> s6.In;

      s6.Left --> f6.In { bufferSize = 4; };
      s6.Right --> s7.In;

      s7.Left --> f7.In { bufferSize = 4; };
      s7.Right --> f8.In { bufferSize = 4; };


      f0.Out --> compute.Ref0 { bufferSize = 4; };
      f1.Out --> compute.Ref1 { bufferSize = 4; };
      f2.Out --> compute.Ref2 { bufferSize = 4; };
      f3.Out --> compute.Ref3 { bufferSize = 4; };
      f4.Out --> compute.Ref4 { bufferSize = 4; };
      f5.Out --> compute.Ref5 { bufferSize = 4; };
      f6.Out --> compute.Ref6 { bufferSize = 4; };
      f7.Out --> compute.Ref7 { bufferSize = 4; };
      f8.Out --> compute.Ref8 { bufferSize = 4; };


      Width  --> f0.Width; 
      Height --> f0.Height; 
      
      Width  --> f1.Width; 
      Height --> f1.Height; 
      
      Width  --> f2.Width; 
      Height --> f2.Height; 
      
      Width  --> f3.Width; 
      Height --> f3.Height; 
      
      Width  --> f4.Width; 
      Height --> f4.Height; 
      
      Width  --> f5.Width; 
      Height --> f5.Height; 
      
      Width  --> f6.Width; 
      Height --> f6.Height; 
      
      Width  --> f7.Width; 
      Height --> f7.Height; 
      
      Width  --> f8.Width; 
      Height --> f8.Height; 
      
      // row_agg_compute.Out --> Out;
      compute.Out --> Out;
      
  end

  network GuassianBlurNetworkSingle()
    uint(size = 8) PixelStream,
    uint(size = 32) Width,
    uint(size = 32) Height ==>
    uint(size = 8) Out:
  
    entities

      /**Pad the borders of the image so that the output image
       will have the same size as the input image
       */
      padding = KernelStreamer(
        stencil_x_neg = -1, stencil_x_pos = 1,
        stencil_y_neg = -1, stencil_y_pos = 1,
        pad_value = 0
      );

      kernel = GuassianBlurKernel();


    structure

      PixelStream --> padding.PixelStream;
      Width --> padding.Width;
      Height --> padding.Height;

      padding.PaddedStream --> kernel.In;
      padding.PaddedHeight --> kernel.Height;
      padding.PaddedWidth --> kernel.Width;

      kernel.Out --> Out;

  end



    actor GuassianBlurNaiveKernel(uint MAX_X, uint MAX_Y) 
      uint(size = 8) In,
      uint(size = 32) Width, uint(size = 32) Height ==> uint(size = 8) Out:
    
      repeat 
        begin 
        var
          List(type: 
            List(type : uint(size = 8), size = MAX_X), 
              size = MAX_Y) image_buffer,
          uint width := 0,
          uint height := 0,
          uint(size = 8) res := 0,
          uint x := 0,
          uint y := 0
        do

          // read the width and height
          Width --> width;
          Height --> height;
          // read the image
          x := 0;
          y := 0;
          @pipeline()
          while y < height do
            In --> image_buffer[x][y];
            if x = width - 1 then
              x := 0;
              y := y + 1;
            else
              x := x + 1;
            end
            
          end
        
           // compute and stream
          x := 1; y := 1;
          @pipeline()
          while y < height - 1 do
            res := (
                (image_buffer[x - 1][y - 1] + 2 * image_buffer[x][y - 1] + image_buffer[x + 1][y - 1])     +
                (image_buffer[x - 1][y    ] + 2 * image_buffer[x][y    ] + image_buffer[x + 1][y    ]) * 2 +
                (image_buffer[x - 1][y + 1] + 2 * image_buffer[x][y + 1] + image_buffer[x + 1][y + 1])
              ) / 16;
            Out <-- res;
            if x = width - 2 then
              x := 1;
              y := y + 1;  
            else
              x := x + 1;
            end
          end         
          
        end
      end
    end



    network GuassianBlurNaiveNetworkSingle()
      uint(size = 8) PixelStream,
      uint(size = 32) Width,
      uint(size = 32) Height ==>
      uint(size = 8) Out:
  
    entities

      /**Pad the borders of the image so that the output image
       will have the same size as the input image
       */
      padding = KernelStreamer(
        stencil_x_neg = -1, stencil_x_pos = 1,
        stencil_y_neg = -1, stencil_y_pos = 1,
        pad_value = 0
      );

      kernel = GuassianBlurNaiveKernel(
        MAX_X = 1024, MAX_Y = 1024
      );


    structure

      PixelStream --> padding.PixelStream;
      Width --> padding.Width;
      Height --> padding.Height;

      padding.PaddedStream --> kernel.In;
      padding.PaddedHeight --> kernel.Height;
      padding.PaddedWidth --> kernel.Width;

      kernel.Out --> Out;

  end
  
end