namespace hetero.stencil.kernels.GuassianBlur:

  import entity hetero.stencil.kernels.utils.KernelStreamer;
  import entity hetero.stencil.kernels.utils.StreamIterator;
  import entity hetero.stencil.kernels.utils.AlphaFilter;
  import entity hetero.stencil.kernels.utils.DynamicFilter;
  import entity hetero.stencil.kernels.utils.Splitter;
  import entity hetero.stencil.bitmap.streamers.BitMapSimpleStreamer;
  import entity hetero.stencil.bitmap.encoders.SimpleBitmapEncoder;
  // import entity hetero.stencil.kernels.GuassianBlur.GuassianBlurNetworkSingle;

  import entity ART.art_Sink_bin;
  import entity ART.art_Source_byte;

  network BitmapBlurNetwork() ==> :

    entities
      file_reader = art_Source_byte(fileName="lena.bmp", loops=0);
      streamer = BitMapSimpleStreamer() { partition = "hw"; };
      kernel_r = GuassianBlurNetworkSingle() { partition = "hw"; };
      kernel_g = GuassianBlurNetworkSingle() { partition = "hw"; };
      kernel_b = GuassianBlurNetworkSingle() { partition = "hw"; };
      kernel_a = GuassianBlurNetworkSingle() { partition = "hw"; };
      alpha_filter = AlphaFilter() { partition = "hw"; };

      encoder = SimpleBitmapEncoder() { partition = "hw"; };
      file_writer = art_Sink_bin(fileName="out.bmp");

    structure 

      file_reader.Out --> streamer.ByteStream;
      streamer.Red --> kernel_r.PixelStream;
      streamer.Width --> kernel_r.Width;
      streamer.Height --> kernel_r.Height;

      streamer.Green --> kernel_g.PixelStream;
      streamer.Width --> kernel_g.Width;
      streamer.Height --> kernel_g.Height;

      streamer.Blue --> kernel_b.PixelStream;
      streamer.Width --> kernel_b.Width;
      streamer.Height --> kernel_b.Height;

      streamer.Width --> alpha_filter.WidthIn;
      streamer.Height --> alpha_filter.HeightIn;
      streamer.BitsPerPixel --> alpha_filter.BitsPerPixelIn;

      streamer.Alpha --> kernel_a.PixelStream;
      alpha_filter.WidthOut --> kernel_a.Width;
      alpha_filter.HeightOut --> kernel_a.Height;

      streamer.Width --> encoder.Width;
      streamer.Height --> encoder.Height;
      streamer.BitsPerPixel --> encoder.BitsPerPixel;
      kernel_r.Out --> encoder.Red;
      kernel_g.Out --> encoder.Green;
      kernel_b.Out --> encoder.Blue;
      kernel_a.Out --> encoder.Alpha;
      // streamer.Red --> encoder.Red;
      // streamer.Green --> encoder.Green;
      // streamer.Blue --> encoder.Blue;
      // streamer.Alpha --> encoder.Alpha;

      encoder.ByteStream --> file_writer.In;

  end
  

end