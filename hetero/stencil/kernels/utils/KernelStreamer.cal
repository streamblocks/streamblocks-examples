namespace hetero.stencil.kernels.utils:


  /* pads a pixel stream for stencil computation, for instance, if some
   * stencil kernel accesses indices [0, -1], [0, -2], [2, 0], [1, 0] then
   * the pixel stream is padded 
   */
  actor KernelStreamer(int stencil_x_neg, int stencil_x_pos, 
    int stencil_y_neg, int stencil_y_pos, uint(size = 8) pad_value)
    uint(size = 8) PixelStream, // either R, G, B, or Alpha
    uint(size = 32) Width, 
    uint(size = 32) Height
    ==>
    uint(size = 32) PaddedHeight,
    uint(size = 32) PaddedWidth,
    uint(size = 8) PaddedStream:
    
    int (size = 32) orig_w := 0;
    int (size = 32) orig_h := 0;
    int (size = 32) x_index := 0;
    int (size = 32) y_index := 0;

    bool idle := true;
    
    procedure inc_index()
    begin
      if (x_index = orig_w + stencil_x_pos - 1) then
        x_index := stencil_x_neg;
        y_index := y_index + 1;
      else 
        x_index := x_index + 1;
      end
    end

    read_h_w: action Width:[w], Height:[h] ==> 
      PaddedWidth:[w + ((stencil_x_pos - stencil_x_neg))],
      PaddedHeight:[h + ((stencil_y_pos - stencil_x_neg))]
    guard idle
    do 
      orig_h := h;
      orig_w := w;
      x_index := stencil_x_neg;
      y_index := stencil_y_neg;

      if (h != 0 and w != 0) then
        idle := false;
      else
        idle := true;
      end
    end

    pixel_stream: action PixelStream:[pixel] ==> PaddedStream:[pixel]
    guard x_index >= 0 and x_index < orig_w and y_index >= 0 and y_index < orig_h and idle = false
    do
      inc_index();
    end

    pad_stream: action ==> PaddedStream:[pad_value]
    guard 
      (
        (y_index < 0 and y_index >= stencil_y_neg and x_index >= stencil_x_neg and x_index < (orig_w + stencil_x_pos)) or // lower band
        (y_index >= orig_h and y_index < (orig_h + stencil_y_pos) and x_index >= stencil_x_neg and x_index < (orig_w + stencil_x_pos)) or // upper band
        (x_index >= stencil_x_neg and x_index < 0 and y_index >= stencil_y_neg and y_index < (orig_h + stencil_y_pos)) or // left band
        (x_index >= orig_w and x_index < (orig_w + stencil_x_pos) and y_index >= stencil_y_neg and y_index < (orig_h + stencil_y_pos))   // right band
      ) and idle = false
      
    do
      inc_index();
    end
    
    reset: action ==>
    guard y_index = (orig_h + stencil_y_pos) and idle = false
    do
      orig_w := 0;
      orig_h := 0;
      x_index := 0;
      y_index := 0;
      idle := true;
    end

    schedule fsm s_init:
      s_init(read_h_w) --> s_stream;
      s_stream(pixel_stream) --> s_stream;
      s_stream(pad_stream) --> s_stream;
      s_stream(reset) --> s_init;
    end
     
    priority 
      read_h_w > pixel_stream;
      pixel_stream > pad_stream;
      pad_stream > reset;
    end
  
  end


  // this actor drops or passes 'count' number of tokens
  actor ChannelGate(type  DTYPE) bool Command, uint(size = 32) Count,
    DTYPE In ==> DTYPE Out:

    bool DROP_COMMAND := false;
    bool PASS_COMMAND := true;

    uint(size = 32) count := 0;
    bool cmd := PASS_COMMAND;
    bool idle := true;

    recv_cmd: action Command:[_cmd], Count:[_count] ==>
    guard count = 0
    do
      count := _count;
      cmd := _cmd;
      
    end

    drop: action In:[t] ==>
    guard cmd = DROP_COMMAND and count != 0
    do
      count := count - 1;
    end
    pass: action In:[t] ==> Out:[t]
    guard cmd = PASS_COMMAND and count != 0
    do
      count := count - 1;
    end

  end


  actor AlphaFilter() 
    uint(size = 32) WidthIn, uint(size = 32) HeightIn, uint(size = 32) BitsPerPixelIn
    ==>
    uint(size = 32) WidthOut, uint(size = 32) HeightOut
    :
    action WidthIn:[w], HeightIn:[h], BitsPerPixelIn:[bpp] ==>
      WidthOut:[ww], HeightOut:[hh]
    var uint(size = 32) ww, uint(size = 32) hh
    do
      if (bpp = 32) then
        ww := w;
        hh := h;
      else
        ww := 0;
        hh := 0;
      end
    end
  end


  /**
    This actor can be placed before the KernelStreamer to feed the output
    of one kernel to itself given some compile time known number of iterations
    Since this actor is used in a cyclic network, the input IteratedStream
    should have enough space for a whole image, i.e., if the the image has
    w * h dimensions, then the buffer should be at least w * h large.
   */
  actor StreamIterator(type DTYPE, uint(size = 32) NUM_ITERATIONS) 
    DTYPE InitialStream,
    DTYPE IteratedStream,
    uint(size = 32) WidthIn, uint(size = 32) HeightIn
    ==>
    DTYPE PixelStream,
    DTYPE Out,
    uint(size = 32) WidthOut, uint(size = 32) HeightOut:

    uint(size = 32) h;
    uint(size = 32) w;
    uint(size = 32) iteration := 0;
    uint(size = 32) pixels_to_stream := 0;
    uint(size = 32) pixels_streamed := 0;
    bool iterations_active := false;
    uint(size = 32) iterations := 0;

    init: action WidthIn:[_w], HeightIn:[_h] ==>
    guard iterations = 0 and pixels_to_stream = 0
    do
      iterations := NUM_ITERATIONS;
      w := _w;
      h := _h;
      pixels_to_stream := w * h;
      iterations_active := false;    
    end


    iter_start: action ==> WidthOut:[w], HeightOut:[h]
    guard iterations != 0 and iterations_active = false
    do
      pixels_streamed := 0;
      iterations_active := true;
    end

    first_iter: action InitialStream:[t] ==> PixelStream:[t]
    guard iterations = NUM_ITERATIONS and iterations_active = true
    do
      pixels_streamed := pixels_streamed + 1;
      if (pixels_streamed = pixels_to_stream) then
        iterations := iterations - 1;
        iterations_active := false;
      end

    end

    loop_body: action IteratedStream:[t] ==> PixelStream:[t]
    guard iterations > 0 and iterations < NUM_ITERATIONS and iterations_active = true
    do
      pixels_streamed := pixels_streamed + 1;
      if (pixels_streamed = pixels_to_stream) then
        iterations := iterations - 1;
        iterations_active := false;
      end
    end

    end_loop: action ==>
    guard iterations = 0 and iterations_active = false
    do
      pixels_streamed := 0;

    end

    stream_output: action IteratedStream:[t] ==> Out:[t]
    guard pixels_streamed != pixels_to_stream 
    do
      pixels_streamed := pixels_streamed + 1;
    end
    
    reset: action ==>
    guard pixels_streamed = pixels_to_stream
    do
      w := 0;
      h := 0;
      iterations_active := false;
    end

    schedule fsm init_state:
      init_state(init) --> loop_state;
      loop_state(iter_start) --> loop_state;
      loop_state(first_iter) --> loop_state;
      loop_state(loop_body) --> loop_state;
      loop_state(end_loop) --> output_state;
      output_state(stream_output) --> output_state;
      output_state(reset) --> init_state;
    end
  end

  
end


