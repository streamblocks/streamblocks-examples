namespace hetero.stencil.utils.formats:
  
  import all System.bitops;

  actor RasterToMacroBlock(int dynamic_size,int picture_width)
    /*int(size=dynamic_size) iW,
    int(size=dynamic_size) iR,*/
    int(size=dynamic_size) Y,
    int(size=dynamic_size) CrCb
    ==>
    int(size=dynamic_size) MB
    :
    
    int(size=dynamic_size) nb_Macb_W:=15;//for 16 macro block
    int(size=dynamic_size) nb_Macb_R:=15;//for 16 macro block
    
    int(size=5) Data_W := 0;
    int(size=5) Line_W := 0;
    int(size=9) Macb_W := 0;
    int(size=2) Bank_W := 0;
    
    int(size=5) Data_R := 0;
    int(size=5) Line_R := 0;
    int(size=9) Macb_R := 0;
    int(size=2) Bank_R := 0;
    
    int(size=2) b_type := -1;
    
    bool both:=true;
    bool isCrCb:=true;
    bool isCr:=false;
    
    bool start:=true;
    
    list( type: list( type: list( type: list( type:int(size=dynamic_size),size=16),size=rshift(picture_width,4)),size=16),size=2) memY := 
      [[[[0 : for _W in Integers(1, 16)]:for _X in Integers(1, 16)]:for _Y in Integers(1, rshift(picture_width,4))]:for _Z in Integers(1, 2)];
    
    list( type:	list( type: list( type:	list( type:int(size=dynamic_size),size=8),size=rshift(picture_width,4)),size=8),size=2) memCr := 
      [[[[0 : for _W in Integers(1, 8)]:for _X in Integers(1, 8)]: for _Y in Integers(1, rshift(picture_width,4))]: for _Z in Integers(1, 2)];
    
    list( type:	list( type:	list( type:	list( type:int(size=dynamic_size),size=8),size=rshift(picture_width,4)),size=8),size=2) memCb := 
      [[[[0 : for _W in Integers(1, 8)] :	for _X in Integers(1, 8)]: for _Y in Integers(1, rshift(picture_width,4))]: for _Z in Integers(1, 2)];
    
    
    /*init: action iW:[w],iR:[r] ==>
    guard not start
    do
      start := true;
      nb_Macb_W:=w;
      nb_Macb_R:=r;
    end*/
    
    lateness.Y: action Y:[y] ==>
    guard not isCrCb,Bank_R=Bank_W,start
    do
      println("late_Y");
      //Write data
      memY[Bank_W][Macb_W][Line_W][Data_W]:=y;
      //next write and goto CrCb acquisition if both=true 
      if both then isCrCb:=true; end
      if Data_W<15 then
        Data_W:=Data_W+1;
      else 
        Data_W:=0; 
        if Macb_W<nb_Macb_W then 
          Macb_W:=Macb_W+1;
        else 
          Macb_W:=0; 
          isCr:=false;
          if Line_W<15 then 
            Line_W:=Line_W+1;
            both := not both;
          else 
            Line_W:=0;
            both := false;
            if Bank_W=0 then Bank_W:=1; else Bank_W:=0; end
          end 
        end
      end
    end
    
    lateness.CrCb: action CrCb:[crcb] ==>
    guard isCrCb,Bank_R=Bank_W,start
    do
      if isCr then
        memCr[Bank_W][Macb_W][rshift(Line_W,1)][rshift(Data_W,1)]:=crcb;
      else
        memCb[Bank_W][Macb_W][rshift(Line_W,1)][rshift(Data_W,1)]:=crcb;
      end
      isCr := not isCr;
      //go back Y acquisition
      isCrCb := false;
    end
    
    fire.Y: action Y:[y] ==> MB:[mb]
    guard not isCrCb,Bank_R!=Bank_W,start
    var int(size=dynamic_size) mb
    do
      //Write data
      memY[Bank_W][Macb_W][Line_W][Data_W]:=y;
      //next write and goto CrCb acquisition if both=true 
      if both then isCrCb:=true; end
      if Data_W<15 then
        Data_W:=Data_W+1;
      else 
        Data_W:=0; 
        if Macb_W<nb_Macb_W then 
          Macb_W:=Macb_W+1;
        else 
          Macb_W:=0; 
          isCr:=false;
          if Line_W<15 then 
            Line_W:=Line_W+1;
            both := not both;
          else 
            Line_W:=0;
            both := false;
            if Bank_W=0 then Bank_W:=1; else Bank_W:=0; end
          end 
        end 
      end
      //Read data
      if b_type<0 then
        mb:=memY[Bank_R,Macb_R,Line_R,Data_R];
      else if b_type=0 then
        mb:=memCr[Bank_R,Macb_R,Line_R,Data_R];
      else
        mb:=memCb[Bank_R,Macb_R,Line_R,Data_R];
      end end
      //next read
      if ((Data_R<15 and b_type<0) or (Data_R<7 and b_type>=0))  then
        Data_R:=Data_R+1;
      else 
        Data_R:=0;
        if ((Line_R<15 and b_type<0) or (Line_R<7 and b_type>=0)) then
          Line_R:=Line_R+1;
        else
          Line_R:=0;
          if b_type<1 then 
            b_type:=b_type+1;
          else 
            b_type:=-1;
            if Macb_R<nb_Macb_R then
              Macb_R:=Macb_R+1;
            else 
              Macb_R:=0;
              if Bank_R=0 then Bank_R:=1; else Bank_R:=0; end
            end
          end
        end 
      end
    end
    
    fire.CrCb: action CrCb:[crcb] ==> MB:[mb]
    guard isCrCb,Bank_R!=Bank_W,start
    var int(size=dynamic_size) mb
    do
      if isCr then
        memCr[Bank_W][Macb_W][rshift(Line_W,1)][rshift(Data_W,1)]:=crcb;
      else
        memCb[Bank_W][Macb_W][rshift(Line_W,1)][rshift(Data_W,1)]:=crcb;
      end
      isCr := not isCr;
      //go back Y acquisition
      isCrCb := false;
      //Read data
      if b_type<0 then
        mb:=memY[Bank_R][Macb_R][Line_R][Data_R];
      else if b_type=0 then
        mb:=memCr[Bank_R][Macb_R][Line_R][Data_R];
      else
        mb:=memCb[Bank_R][Macb_R][Line_R][Data_R];
      end end
      //next read
      if ((Data_R<15 and b_type<0) or (Data_R<7 and b_type>=0))  then
        Data_R:=Data_R+1;
      else 
        Data_R:=0;
        if ((Line_R<15 and b_type<0) or (Line_R<7 and b_type>=0)) then
          Line_R:=Line_R+1;
        else
          Line_R:=0;
          if b_type<1 then 
            b_type:=b_type+1;
          else 
            b_type:=-1;
            if Macb_R<nb_Macb_R then
              Macb_R:=Macb_R+1;
            else 
              Macb_R:=0;
              if Bank_R=0 then Bank_R:=1; else Bank_R:=0; end
            end
          end
        end 
      end
    end
    
    flush: action ==> MB:[mb]
    guard Bank_R!=Bank_W,start
    var int(size=dynamic_size) mb
    do
      //Read data
      if b_type<0 then
        mb:=memY[Bank_R][Macb_R][Line_R][Data_R];
      else if b_type=0 then
        mb:=memCr[Bank_R][Macb_R][Line_R][Data_R];
      else
        mb:=memCb[Bank_R][Macb_R][Line_R][Data_R];
      end end
      //next read
      if ((Data_R<15 and b_type<0) or (Data_R<7 and b_type>=0))  then
        Data_R:=Data_R+1;
      else 
        Data_R:=0;
        if ((Line_R<15 and b_type<0) or (Line_R<7 and b_type>=0)) then
          Line_R:=Line_R+1;
        else
          Line_R:=0;
          if b_type<1 then 
            b_type:=b_type+1;
          else 
            b_type:=-1;
            if Macb_R<nb_Macb_R then
              Macb_R:=Macb_R+1;
            else 
              Macb_R:=0;
              if Bank_R=0 then Bank_R:=1; else Bank_R:=0; end
            end
          end
        end 
      end
    end
    
    priority
      fire.CrCb > flush;
      fire.Y > flush;
    end
  end

end