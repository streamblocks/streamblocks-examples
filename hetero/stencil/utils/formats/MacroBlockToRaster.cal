namespace hetero.stencil.utils.formats:
  import all System.bitops;

  actor MacroBlockToRaster(int dynamic_size, int picture_width)
    int(size=dynamic_size) MB
    ==>
    int(size=dynamic_size) Y,
    int(size=dynamic_size) CrCb:
	
		int Macb:=15;//for 16 macro block
		
		int(size=5) Data_W := 0;
		int(size=5) Line_W := 0;
		int(size=9) Macb_W := 0;
		int(size=2) Bank_W := 0;
		
		int(size=5) Data_R := 0;
		int(size=5) Line_R := 0;
		int(size=9) Macb_R := 0;
		int(size=2) Bank_R := 0;
		
		int(size=2) b_type := -1;
		
		bool both:=false;
		bool isCrCb:=false;
		bool isCr:=false;
		
		list( type:	list( type:	list( type:	list( type:int(	size=dynamic_size),size=16), size=rshift(picture_width,4)), size=16), size=2) memY := 
			[[[[0 : for _W in Integers(1, 16)]: for _X in Integers(1, 16)]: for _Y in Integers(1, rshift(picture_width,4))]: for _Z in Integers(1, 2)];
		
		list( type:	list( type: list( type: list( type:int(size=dynamic_size),size=8), size=rshift(picture_width,4)), size=8), size=2) memCr := 
			[[[[0 : for _W in Integers(1, 8)]: for _X in Integers(1, 8)]: for _Y in Integers(1, rshift(picture_width,4))]: for _Z in Integers(1, 2)];
		
		list( type:	list( type:	list( type:	list( type:int(size=dynamic_size),size=8),size=rshift(picture_width,4)),size=8), size=2) memCb := 
			[[[[0 : for _W in Integers(1, 8)]: for _X in Integers(1, 8)]: for _Y in Integers(1, rshift(picture_width,4))]: for _Z in Integers(1, 2)];
		
		lateness: action MB:[mb] ==>
		guard Bank_W=Bank_R
		do
			//Write Data
			if b_type<0 then
				memY[Bank_W][Macb_W][Line_W][Data_W]:=mb;
			else if b_type=0 then
				memCr[Bank_W][Macb_W][Line_W][Data_W]:=mb;
			else
				memCb[Bank_W][Macb_W][Line_W][Data_W]:=mb;
			end end
			//next write
			if ((Data_W<15 and b_type<0) or (Data_W<7 and b_type>=0))  then
				Data_W:=Data_W+1;
			else 
				Data_W:=0;
				if ((Line_W<15 and b_type<0) or (Line_W<7 and b_type>=0)) then
					Line_W:=Line_W+1;
				else
					Line_W:=0;
					if b_type<1 then 
						b_type:=b_type+1;
					else 
						b_type:=-1;
						if Macb_W<Macb then
							Macb_W:=Macb_W+1;
						else 
							Macb_W:=0;
							if Bank_W=0 then Bank_W:=1; else Bank_W:=0; end
						end
					end
				end 
			end
		end
		
		fire.Y: action MB:[mb] ==> Y:[y]
		guard not isCrCb,Bank_W!=Bank_R
		var int(size=dynamic_size) y
		do
			//Write Data
			if b_type<0 then
				memY[Bank_W][Macb_W][Line_W][Data_W]:=mb;
			else if b_type=0 then
				memCr[Bank_W][Macb_W][Line_W][Data_W]:=mb;
			else
				memCb[Bank_W][Macb_W][Line_W][Data_W]:=mb;
			end end
			//next write
			if ((Data_W<15 and b_type<0) or (Data_W<7 and b_type>=0))  then
				Data_W:=Data_W+1;
			else 
				Data_W:=0;
				if ((Line_W<15 and b_type<0) or (Line_W<7 and b_type>=0)) then
					Line_W:=Line_W+1;
				else
					Line_W:=0;
					if b_type<1 then 
						b_type:=b_type+1;
					else 
						b_type:=-1;
						if Macb_W<Macb then
							Macb_W:=Macb_W+1;
						else 
							Macb_W:=0;
							if Bank_W=0 then Bank_W:=1; else Bank_W:=0; end
						end
					end
				end 
			end
			//Read data
			y:=memY[Bank_R,Macb_R,Line_R,Data_R];
			//next read and goto CrCb acquisition if both=true 
			if both then isCrCb:=true; end
			if Data_R<15 then
				Data_R:=Data_R+1;
			else 
				Data_R:=0; 
				if Macb_R<Macb then 
					Macb_R:=Macb_R+1;
				else 
					Macb_R:=0; 
					isCr:=false;
					if Line_R<15 then 
						Line_R:=Line_R+1;
						both := not both;
					else 
						Line_R:=0;
						both := false;
						if Bank_R=0 then Bank_R:=1; else Bank_R:=0; end
					end 
				end 
			end
		end
		
		fire.CrCb: action MB:[mb] ==> CrCb:[crcb]
		guard isCrCb,Bank_W!=Bank_R
		var int(size=dynamic_size) crcb
		do
			//Write Data
			if b_type<0 then
				memY[Bank_W][Macb_W][Line_W][Data_W]:=mb;
			else if b_type=0 then
				memCr[Bank_W][Macb_W][Line_W][Data_W]:=mb;
			else
				memCb[Bank_W][Macb_W][Line_W][Data_W]:=mb;
			end end
			//next write
			if ((Data_W<15 and b_type<0) or (Data_W<7 and b_type>=0))  then
				Data_W:=Data_W+1;
			else 
				Data_W:=0;
				if ((Line_W<15 and b_type<0) or (Line_W<7 and b_type>=0)) then
					Line_W:=Line_W+1;
				else
					Line_W:=0;
					if b_type<1 then 
						b_type:=b_type+1;
					else 
						b_type:=-1;
						if Macb_W<Macb then
							Macb_W:=Macb_W+1;
						else 
							Macb_W:=0;
							if Bank_W=0 then Bank_W:=1; else Bank_W:=0; end
						end
					end
				end 
			end
			//Read data
			if isCr then
				crcb:=memCr[Bank_R][Macb_R][rshift(Line_R,1)][rshift(Data_R,1)];
			else
				crcb:=memCb[Bank_R][Macb_R][rshift(Line_R,1)][rshift(Data_R,1)];
			end
			isCr := not isCr;
			//go back Y acquisition
			isCrCb := false;
		end
	end



end