namespace hetero.decoder.mpeg.rvc:

    import all org.sc29.wg11.mpeg4.part2.Constants;

    actor Mgnt_Merger()
        int(size=PIX_SZ) Y, 
        int(size=PIX_SZ) U, 
        int(size=PIX_SZ) V 
            ==> 
        int(size=32) YUV :


        Read_Y: action Y:[y] repeat 256 ==> YUV:[y] repeat 256
        var
            int(size=32)[256] y_out
        do
            foreach int i in 0 .. 255 do
                y_out[i] := y[i];
            end
        end

        

        // Select the U blocks
        Read_U: action U:[ u ] repeat 64 ==> YUV:[ u ] repeat 64
        var
            int(size=32)[64] u_out
        do
            foreach int i in 0 .. 63 do
                u_out[i] := u[i];
            end
        end

        // Select the V blocks
        Read_V: action V:[ v ] repeat 64 ==> YUV:[ v ] repeat 64
        var
            int(size=32)[64] v_out
        do
            foreach int i in 0 .. 63 do
                v_out[i] := v[i];
            end
        end

        schedule fsm Y :
            Y ( Read_Y ) --> U;
            
            U ( Read_U ) --> V;
        
            V ( Read_V ) --> Y;
        end
    end

    import entity org.sc29.wg11.common.Algo_Byte2bit;
    import entity org.sc29.wg11.mpeg4.part2.sp.parser.RVC_parser;
    import entity org.sc29.wg11.mpeg4.part2.sp.texture.RVC_texture_16x16;
    import entity org.sc29.wg11.mpeg4.part2.sp.texture.RVC_texture_8x8;
    import entity org.sc29.wg11.mpeg4.part2.sp.motion.RVC_motion_Y;
    import entity org.sc29.wg11.mpeg4.part2.sp.motion.RVC_motion_UV;

    network RVC_decoder()
        uint(size=8) bits 
        ==>
        uint(size=32) VID,
        int(size=16) WIDTH,
        int(size=16) HEIGHT:

    entities
        serialize = Algo_Byte2bit();
        parser = RVC_parser();
        texture_Y = RVC_texture_16x16();
        texture_U = RVC_texture_8x8();
        texture_V = RVC_texture_8x8();
        motion_Y = RVC_motion_Y();
        motion_U = RVC_motion_UV();
        motion_V = RVC_motion_UV();
        merger420 = Mgnt_Merger();
    structure
        bits --> serialize.BYTE;

        // -- Parser
        serialize.BITS --> parser.BITS;

        // -- Texture Y
        parser.B_Y --> texture_Y.QFS;
        parser.WIDTH --> texture_Y.WIDTH;
        parser.QUANT_Y --> texture_Y.QP;
        parser.Y_AC --> texture_Y.ACCODED;
        parser.ACP_Y --> texture_Y.ACPRED;
        parser.BTYPE_Y --> texture_Y.BTYPE;

        // -- Texture U
        parser.B_U --> texture_U.QFS;
        parser.WIDTH --> texture_U.WIDTH;
        parser.U_AC --> texture_U.ACCODED;
        parser.QUANT_U --> texture_U.QP;
        parser.ACP_U --> texture_U.ACPRED;
        parser.BTYPE_U --> texture_U.BTYPE;

        // -- Texture V
        parser.B_V --> texture_V.QFS;
        parser.WIDTH --> texture_V.WIDTH;
        parser.V_AC --> texture_V.ACCODED;
        parser.QUANT_V --> texture_V.QP;
        parser.ACP_V --> texture_V.ACPRED;
        parser.BTYPE_V --> texture_V.BTYPE;

       
        // -- Motion Y
        texture_Y.f --> motion_Y.TEX;
        parser.MV_Y --> motion_Y.MV;
        parser.WIDTH --> motion_Y.WIDTH;
        parser.HEIGHT --> motion_Y.HEIGHT;
        parser.ROUND --> motion_Y.ROUND;
        parser.Y_AC --> motion_Y.ACCODED;
        parser.Y_MOT --> motion_Y.MOTION;
        parser.BTYPE_Y --> motion_Y.BTYPE;

        // -- Motion U
        texture_U.f --> motion_U.TEX;
        parser.MV_U --> motion_U.MV;
        parser.WIDTH --> motion_U.WIDTH;
        parser.HEIGHT --> motion_U.HEIGHT;
        parser.U_AC --> motion_U.ACCODED;
        parser.ROUND --> motion_U.ROUND;
        parser.U_MOT --> motion_U.MOTION;
        parser.BTYPE_U --> motion_U.BTYPE;

        // -- Motion V
        texture_V.f --> motion_V.TEX;
        parser.MV_V --> motion_V.MV;
        parser.WIDTH --> motion_V.WIDTH;
        parser.HEIGHT --> motion_V.HEIGHT;
        parser.V_AC --> motion_V.ACCODED;
        parser.ROUND --> motion_V.ROUND;
        parser.V_MOT --> motion_V.MOTION;
        parser.BTYPE_V --> motion_V.BTYPE;
       
        // -- Merger
        motion_Y.VID --> merger420.Y;
        motion_U.VID --> merger420.U;
        motion_V.VID --> merger420.V;

        merger420.YUV --> VID;
        parser.WIDTH --> WIDTH;
        parser.HEIGHT --> HEIGHT;
    end

    import entity ART.art_Source_byte;
    import entity ART.art_Display_yuv_width_height;

    network Top_mpeg4_part2_SP_decoder() ==> :
    entities    
        source  = art_Source_byte(fileName="./foreman_qcif_30.bit", loops=10); 
        display = art_Display_yuv_width_height(title="StreamBlocks Multicore", width=176, height=144);
        
        decoder = RVC_decoder(){partition="hw";};
    structure
        source.Out --> decoder.bits;

        decoder.VID --> display.In;
        decoder.WIDTH --> display.WIDTH;
        decoder.HEIGHT --> display.HEIGHT; 
    end


end