namespace hetero.decoder.mpeg.xilinx:

    import entity ART.art_Source_byte;
    import entity ART.art_Display_yuv_width_height;

    import entity com.xilinx.mpeg4.part2.sp.Decoder;
    import entity com.xilinx.mpeg4.part2.sp.DDRModel;

    import entity ART.art_Sink_txt;

    import entity hetero.utils.Comparator;

    actor Merger() int(size=9) YUV_i ==> int(size=32) YUV :

        int Counter := 0;

        Read_Y: action YUV_i:[y] ==> YUV:[y]
        do
            Counter := Counter + 1;
        end

        stop256 : action ==>
        guard
            Counter = 256
        do
            Counter := 0;
        end

        stop64 : action ==>
        guard
            Counter = 64
        do
            Counter := 0;
        end

        // Select the U blocks
        Read_U: action YUV_i:[ u ] ==> YUV:[ u ]
        do
            Counter := Counter + 1;
        end

        // Select the V blocks
        Read_V: action YUV_i:[ v ]==> YUV:[ v ]
        do
            Counter := Counter + 1;
        end

        schedule fsm Y :
            Y ( Read_Y ) --> Y;
            Y ( stop256 ) --> U;
            U ( Read_U ) --> U;
            U ( stop64 ) --> V;
            V ( Read_V ) --> V;
            V ( stop64 ) --> Y;
        end

        priority
            stop256 > Read_Y;
            stop64 > Read_U;
            stop64 > Read_V;
        end
    end


    network XilinxDecoder() uint(size=1) bits ==> 
        uint(size=16) WIDTH, uint(size=16) HEIGHT, int(size=32) YUV:
        entities

            decoder = Decoder();
            ddr = DDRModel();
            merger = Merger();
        
        structure

            bits --> decoder.bits;
            ddr.RD --> decoder.MCD;

            decoder.MBD --> ddr.WD;
            decoder.MBA --> ddr.WA;
            decoder.MCA --> ddr.RA;
            decoder.VIDEO --> merger.YUV_i;
            decoder.WIDTH --> WIDTH;
            decoder.HEIGHT --> HEIGHT;

            merger.YUV --> YUV;


    end
    network XilinxNetwork() ==> :
        entities
            source  = art_Source_byte(fileName="./foreman_qcif_30.bit", loops=10); 
            decoder = XilinxDecoder() { partition = "hw"; };
            
            display = art_Display_yuv_width_height(title="StreamBlocks Multicore", width=176, height=144);

        structure
            source.Out --> decoder.bits;
            decoder.WIDTH --> display.WIDTH;
            decoder.HEIGHT --> display.HEIGHT;
            decoder.YUV --> display.In;
        
    end


    network XilinxTester() ==> :

        entities
            source = art_Source_byte(fileName="./foreman_qcif_30.bit", loops=1);
            sinkBits = art_Sink_txt(fileName="./input_bits.txt");
            sinkYuv = art_Sink_txt(fileName="./output_yuv.txt");

            swDecoder = XilinxDecoder();
            display = art_Display_yuv_width_height(title="StreamBlocks Multicore", width=176, height=144);


            hwDecoder = XilinxDecoder() { partition = "hw"; };

            comparatorYUV = Comparator();
            comparatorWIDTH = Comparator();
            comparatorHEIGHT = Comparator();

            sinkYUVSw = art_Sink_txt(fileName="./sink_YUV_sw.txt");
            sinkWIDTHSw = art_Sink_txt(fileName="./sink_WIDTH_sw.txt");
            sinkHEIGHTSw = art_Sink_txt(fileName="./sink_HEIGHT_sw.txt");
            sinkYUVHw = art_Sink_txt(fileName="./sink_YUV_hw.txt");
            sinkWIDTHHw = art_Sink_txt(fileName="./sink_WIDTH_hw.txt");
            sinkHEIGHTHw = art_Sink_txt(fileName="./sink_HEIGHT_hw.txt");

            sinkYUVErr = art_Sink_txt(fileName="./sink_YUV_err.txt");
            sinkWIDTHErr = art_Sink_txt(fileName="./sink_WIDTH_err.txt");
            sinkHEIGHTErr = art_Sink_txt(fileName="./sink_HEIGHT_err.txt");
        structure

            source.Out --> swDecoder.bits;
            source.Out --> hwDecoder.bits;
            source.Out --> sinkBits.In;

            swDecoder.YUV --> display.In;
            swDecoder.HEIGHT --> display.HEIGHT;
            swDecoder.WIDTH --> display.WIDTH;
            swDecoder.YUV --> sinkYuv.In;

            hwDecoder.YUV --> comparatorYUV.In1;
            swDecoder.YUV --> comparatorYUV.In2;

            hwDecoder.WIDTH --> comparatorWIDTH.In1;
            swDecoder.WIDTH --> comparatorWIDTH.In2;

            hwDecoder.HEIGHT --> comparatorHEIGHT.In1;
            swDecoder.HEIGHT --> comparatorHEIGHT.In2;

            comparatorYUV.ErrIx --> sinkYUVErr.In;
            comparatorYUV.V1 --> sinkYUVHw.In;
            comparatorYUV.V2 --> sinkYUVSw.In;

            comparatorWIDTH.ErrIx --> sinkWIDTHErr.In;
            comparatorWIDTH.V1 --> sinkWIDTHHw.In;
            comparatorWIDTH.V2 --> sinkWIDTHSw.In;

            comparatorHEIGHT.ErrIx --> sinkHEIGHTErr.In;
            comparatorHEIGHT.V1 --> sinkHEIGHTHw.In;
            comparatorHEIGHT.V2 --> sinkHEIGHTSw.In;


    end


    
end