// qpskMod.cal
//
// Copyright (c) 2013 University of Oulu, Finland
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// O-QSPK modulator for IEEE 802.15.4 (ZigBee) Baseband
// transmission. Based on the C code implementation written
// by Amanullah Ghazi. Described in SDR-WInnComm 2013 paper
// "Low-complexity SDR Implementation of IEEE 802.15.4 (ZigBee)
// Baseband Transceiver on Application Specific Processor"  
//
// Changelog:
// - initial version 01/10/2012
// - cleanup for release 08/10/2012
// - multitoken-version 04/03/2013
// - removed output variable 24/04/2014

namespace ZigBee:

import all constants;

actor qpskMod() 
// Inputs:
uint(size=CHIP_SZ) chip              // Packets of 32 chips.
// Outputs:
==> 
int(size=SYMB_SZ) symb               // I-Q symbols. Range: [-128, 127]
:
	// mapping of chips to I-Q samples
	function q7_map( int(size=CHIP_SZ) bit ) --> int(size=SYMB_SZ) :
		255 * bit - 128	
	end

	// transforms a chip to I-Q modulated samples and sends
	@acc
	action chip:[ c_in ] ==> symb:[ [q7_map((c_in >> n) & 1) : for int n in 0 .. 31] ] repeat 32
	end

end

end