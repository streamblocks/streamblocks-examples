// source.cal
//
// Copyright (c) 2012 University of Oulu, Finland
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// Signal source for IEEE 802.15.4 (ZigBee) Baseband
// transmission. Represents upper layer that provides
// data from the ZigBee baseband.
//
// Changelog:
// - initial version 01/10/2012
// - cleanup for release 08/10/2012
// - TTA compatible natives 24/04/2014

namespace ZigBee:

import all std.io.source;
import all constants;

actor source(String fileName_ZB_i) 
==> 
// Outputs:
uint(size=PL_DATA_SZ) pl_bits        // payload bits as octets 
:
	
    // the length of the payload
	uint(size=PAYLOAD_LEN_SZ) octet_count;
	
	// payload octet counter
	uint(size=PAYLOAD_LEN_SZ) octet_index;

	initialize ==>
	do
		source_init_ZB(fileName_ZB_i);
		octet_index := 0;
		octet_count := source_sizeOfFile_ZB();
	end

	// send_length action
	// transmit payload length in data as part of data frame
	length: action ==> pl_bits : [ octet_count ]
	guard
		octet_count > 4
	end 
	
	// send_payload_octet
	// transmit one octet of the data coming from higher layer
	payload: action ==> pl_bits : [ source_readByte_ZB() ]
	guard
		octet_index < octet_count
	do
		octet_index := octet_index + 1; 
	end
	
	// done action
	// transition back to waiting for a new data frame
	done: action ==>
	guard
		octet_index = octet_count 
	do
		octet_index := 0;
		octet_count := source_sizeOfFile_ZB();
	end

	schedule fsm s_length :
		s_length ( length ) --> s_payload;
		s_payload ( payload ) --> s_payload;
		s_payload ( done ) --> s_length;
	end
	
	priority
		payload > done;
	end
end

end