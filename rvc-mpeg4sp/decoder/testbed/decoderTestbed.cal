/* 
 * Copyright (c) Ericsson AB, 2013 / EPFL,  2020
 * All rights reserved.
 *
 * License terms:
 *
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 *     * Redistributions of source code must retain the above 
 *       copyright notice, this list of conditions and the 
 *       following disclaimer.
 *     * Redistributions in binary form must reproduce the 
 *       above copyright notice, this list of conditions and 
 *       the following disclaimer in the documentation and/or 
 *       other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names 
 *       of its contributors may be used to endorse or promote 
 *       products derived from this software without specific 
 *       prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace RVC:

import entity RVC.decoder;

  network decoderWithIO() uint(size=8) bits ==> int(size=32) VID, int(size=16) WIDTH, int(size=16) HEIGHT:
  var 
    bool LARGE_MEMORY = false;
    int MAX_WIDTH  = if LARGE_MEMORY then 1920 else 176 end;
    int MAX_HEIGHT = if LARGE_MEMORY then 1080 else 144 end;

   entities
    decoder = decoder(ACCODED=2,
                      ACPRED=1,
                      ADDR_SZ=24,
                      BTYPE_SZ=12,
                      FCODE_MASK=448,
                      FCODE_SHIFT=6,
                      FOURMV=4,
                      INTER=512,
                      INTRA=1024,
                      MAXH_IN_MB=MAX_HEIGHT/16+1,
                      MAXW_IN_MB=MAX_WIDTH/16+1,
                      MB_COORD_SZ=8,
                      MOTION=8,
                      MV_SZ=9,
                      NEWVOP=2048,
                      QUANT_MASK=31,
                      ROUND_TYPE=32,
                      SAMPLE_COUNT_SZ=8,
                      SAMPLE_SZ=13);

    structure
      bits --> decoder.bits;
      decoder.VID --> VID;
      decoder.WIDTH --> WIDTH;
      decoder.HEIGHT --> HEIGHT;

  end

end
